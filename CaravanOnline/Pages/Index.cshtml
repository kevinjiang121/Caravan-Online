@page
@model IndexModel
@using CaravanOnline.Services
@using CaravanOnline.Models

<h2 id="userMessage">@Model.Message</h2>

<div style="margin-bottom: 15px;">
    <button type="button" onclick="activateDiscardLane()">Discard Lane</button>
    <button type="button" onclick="activateDiscardCard()">Discard Card</button>
</div>

<form method="post" id="card-selection-form">
    <p>Current Player: @HttpContext.Session.GetString("CurrentPlayer")</p>
    <div class="player-cards">
        @if (HttpContext.Session.GetString("CurrentPlayer") == "Player 1" 
            && Model.Player1Cards != null && Model.Player1Cards.Count > 0)
        {
            <p>Player 1: Select a card</p>
            @foreach (var card in Model.Player1Cards)
            {
                var cardImagePath = CardImageHelper.GetCardImagePath(card);
                <button type="button" class="card"
                        onclick="highlightCards('@card.Face', '@card.Face @card.Suit')">
                    <img src="@cardImagePath" alt="@card.Face @card.Suit" style="width:80px; height:auto;" />
                </button>
            }
        }
        else if (HttpContext.Session.GetString("CurrentPlayer") == "Player 2" 
                 && Model.Player2Cards != null && Model.Player2Cards.Count > 0)
        {
            <p>Player 2: Select a card</p>
            @foreach (var card in Model.Player2Cards)
            {
                var cardImagePath = CardImageHelper.GetCardImagePath(card);
                <button type="button" class="card"
                        onclick="highlightCards('@card.Face', '@card.Face @card.Suit')">
                    <img src="@cardImagePath" alt="@card.Face @card.Suit" style="width:80px; height:auto;" />
                </button>
            }
        }
    </div>
    <input type="hidden" name="selectedCard" id="selectedCardInput">
</form>

<div>
    <h3>Lane Displays</h3>
    <div style="display: flex; flex-direction: column;">
        <div style="display: flex; justify-content: space-around;">
            @for (int lane = 1; lane <= 3; lane++)
            {
                <div>
                    <form method="post">
                        <button type="submit" name="selectedLane" value="@lane"
                                style="background:none;border:none;padding:0;cursor:pointer;"
                                @(HttpContext.Session.GetString("CurrentPlayer") == "Player 1" ? "" : "disabled")>
                            <h4>Lane @lane (Score: @Model.CalculateLaneScore(@lane))</h4>
                        </button>

                        @if (Model.Lanes.Count >= lane && Model.Lanes[lane - 1] != null)
                        {
                            @for (int index = 0; index < Model.Lanes[lane - 1].Count; index++)
                            {
                                var laneCard = Model.Lanes[lane - 1][index];
                                var cardImagePath = CardImageHelper.GetCardImagePath(laneCard);
                                <div class="card-container">
                                    <p class="lane-card card"
                                       data-lane="@lane"
                                       data-card="@laneCard.Face @laneCard.Suit"
                                       data-index="@index"
                                       onclick="cardClicked('@laneCard.Face', '@laneCard.Suit', @index)">
                                        <img src="@cardImagePath" alt="@laneCard.Face @laneCard.Suit" style="width:80px; height:auto;" />
                                    </p>
                                    <div class="attached-cards">
                                        @foreach (var attachedCard in laneCard.AttachedCards)
                                        {
                                            var attachedImagePath = CardImageHelper.GetCardImagePath(attachedCard);
                                            <p class="card">
                                                <img src="@attachedImagePath"
                                                     alt="@attachedCard.Face @attachedCard.Suit"
                                                     style="width:60px; height:auto;" />
                                            </p>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>Empty</p>
                        }
                    </form>
                </div>
            }
        </div>

        <div style="display: flex; justify-content: space-around;">
            @for (int lane = 4; lane <= 6; lane++)
            {
                <div>
                    <form method="post">
                        <button type="submit" name="selectedLane" value="@lane"
                                style="background:none;border:none;padding:0;cursor:pointer;"
                                @(HttpContext.Session.GetString("CurrentPlayer") == "Player 2" ? "" : "disabled")>
                            <h4>Lane @lane (Score: @Model.CalculateLaneScore(@lane))</h4>
                        </button>

                        @if (Model.Lanes.Count >= lane && Model.Lanes[lane - 1] != null)
                        {
                            @for (int index = 0; index < Model.Lanes[lane - 1].Count; index++)
                            {
                                var laneCard = Model.Lanes[lane - 1][index];
                                var cardImagePath = CardImageHelper.GetCardImagePath(laneCard);
                                <div class="card-container">
                                    <p class="lane-card card"
                                       data-lane="@lane"
                                       data-card="@laneCard.Face @laneCard.Suit"
                                       data-index="@index"
                                       onclick="cardClicked('@laneCard.Face', '@laneCard.Suit', @index)">
                                        <img src="@cardImagePath" alt="@laneCard.Face @laneCard.Suit" style="width:80px; height:auto;" />
                                    </p>
                                    <div class="attached-cards">
                                        @foreach (var attachedCard in laneCard.AttachedCards)
                                        {
                                            var attachedImagePath = CardImageHelper.GetCardImagePath(attachedCard);
                                            <p class="card">
                                                <img src="@attachedImagePath"
                                                     alt="@attachedCard.Face @attachedCard.Suit"
                                                     style="width:60px; height:auto;" />
                                            </p>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>Empty</p>
                        }
                    </form>
                </div>
            }
        </div>
    </div>
</div>

<script>
    let selectedCardFace = null;
    let selectedCardFull = null;
    let discardLaneMode = false;
    let discardCardMode = false;

    function setUserMessage(msg) {
        document.getElementById('userMessage').innerText = msg;
    }

    function activateDiscardLane() {
        discardLaneMode = true;
        discardCardMode = false;
        setUserMessage("Click on the lane button you want to discard.");
    }

    function activateDiscardCard() {
        discardLaneMode = false;
        discardCardMode = true;
        setUserMessage("Click on a card in your HAND to discard it.");
    }

    function highlightCards(face, fullCard) {
        if (discardCardMode) {
            discardSelectedCard(face, fullCard);
            return;
        }
        selectedCardFace = face;
        selectedCardFull = fullCard;
        document.getElementById('selectedCardInput').value = fullCard;

        const laneCards = document.querySelectorAll('.lane-card');
        laneCards.forEach(laneCard => {
            if (face === 'K' || face === 'Q' || face === 'J') {
                laneCard.classList.add('highlight');
                laneCard.style.border = '2px solid red'; // Visual highlight
            } else {
                laneCard.classList.remove('highlight');
                laneCard.style.border = 'none';
            }
        });

        if (face !== 'K' && face !== 'Q' && face !== 'J') {
            document.getElementById('card-selection-form').submit();
        }
    }

    function discardSelectedCard(face, fullCard) {
        const suit = fullCard.split(' ')[1];
        fetch('/?handler=DiscardCardClick', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getRequestVerificationToken()
            },
            body: JSON.stringify({ Face: face, Suit: suit })
        })
        .then(r => r.json())
        .then(result => {
            if (result.success) {
                location.reload();
            } else {
                setUserMessage(result.message || "Error discarding card.");
            }
        })
        .catch(err => {
            setUserMessage("Discard card error.");
        })
        .finally(() => {
            discardCardMode = false;
        });
    }

    document.querySelectorAll('[name="selectedLane"]').forEach(btn => {
        btn.addEventListener('click', evt => {
            if (discardLaneMode) {
                evt.preventDefault();
                const lane = evt.currentTarget.value;
                fetch('/?handler=DiscardLaneClick', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getRequestVerificationToken()
                    },
                    body: JSON.stringify({ Lane: lane })
                })
                .then(r => r.json())
                .then(result => {
                    if (result.success) {
                        location.reload();
                    } else {
                        setUserMessage(result.message || "Error discarding lane.");
                    }
                })
                .catch(err => {
                    setUserMessage("Discard lane error.");
                })
                .finally(() => {
                    discardLaneMode = false;
                });
            }
        });
    });

    function placeCardNextTo(event, cardIndex) {
        if (selectedCardFace !== 'K' && selectedCardFace !== 'Q' && selectedCardFace !== 'J') return;
        const cardElement = event.target.closest('.lane-card');
        const cardFace = cardElement.getAttribute('data-card').split(' ')[0];
        const cardSuit = cardElement.getAttribute('data-card').split(' ')[1];
        const lane = parseInt(cardElement.getAttribute('data-lane'));
        const index = cardIndex;

        fetch('/?handler=PlaceCardNextTo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getRequestVerificationToken()
            },
            body: JSON.stringify({
                Card: ${cardFace} ${cardSuit},
                AttachedCard: selectedCardFull,
                CardIndex: index,
                Lane: lane
            })
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                location.reload();
            } else {
                alert(result.message || "Error attaching card.");
            }
        })
        .catch(err => {
            alert("Attach card error.");
        });

        resetHighlights();
    }

    function resetHighlights() {
        document.querySelectorAll('.lane-card').forEach(laneCard => {
            laneCard.classList.remove('highlight');
            laneCard.style.border = 'none'; // Remove visual highlight
        });
        selectedCardFace = null;
        selectedCardFull = null;
    }

    function cardClicked(face, suit, index) {
        if (selectedCardFace === 'K' || selectedCardFace === 'Q' || selectedCardFace === 'J') {
            event.preventDefault();
            placeCardNextTo(event, index);
        }
    }

    function getRequestVerificationToken() {
        const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        return tokenElement ? tokenElement.value : '';
    }
</script>