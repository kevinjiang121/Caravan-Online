@page
@model IndexModel

<style>
    .highlight {
        font-weight: bold;
        cursor: pointer;
    }
    .dim {
        opacity: 0.5;
    }
    .card-container {
        display: flex;
        flex-direction: row;
        align-items: center;
    }
    .attached-cards {
        display: flex;
        flex-direction: row;
        margin-left: 10px;
    }
    .card {
        margin-right: 5px;
    }
    .player-cards {
        display: flex;
        flex-direction: row;
        margin-bottom: 20px;
    }
</style>

<h2>@Model.Message</h2>

<form method="post" id="card-selection-form">
    <p>Current Player: @HttpContext.Session.GetString("CurrentPlayer")</p>
    <div class="player-cards">
        @if (HttpContext.Session.GetString("CurrentPlayer") == "Player 1" && Model.Player1Cards != null && Model.Player1Cards.Count > 0)
        {
            <p>Player 1: Select a card</p>
            @foreach (var card in Model.Player1Cards)
            {
                <!-- Send face + suit to highlightCards -->
                <button type="button" class="card"
                        onclick="highlightCards('@card.Face', '@card.Face @card.Suit')">
                    @card.Face @card.Suit
                </button>
            }
        }
        else if (HttpContext.Session.GetString("CurrentPlayer") == "Player 2" && Model.Player2Cards != null && Model.Player2Cards.Count > 0)
        {
            <p>Player 2: Select a card</p>
            @foreach (var card in Model.Player2Cards)
            {
                <button type="button" class="card"
                        onclick="highlightCards('@card.Face', '@card.Face @card.Suit')">
                    @card.Face @card.Suit
                </button>
            }
        }
    </div>
    <input type="hidden" name="selectedCard" id="selectedCardInput">
</form>

<div>
    <h3>Lane Displays</h3>
    <div style="display: flex; flex-direction: column;">
        <div style="display: flex; justify-content: space-around;">
            @for (int lane = 1; lane <= 3; lane++)
            {
                <div>
                    <form method="post">
                        <button type="submit" name="selectedLane" value="@lane"
                                style="background:none;border:none;padding:0;cursor:pointer;"
                                @(HttpContext.Session.GetString("CurrentPlayer") == "Player 1" ? "" : "disabled")>
                            <h4>Lane @lane (Score: @Model.CalculateLaneScore(@lane))</h4>
                        </button>
                        @if (Model.Lanes.Count >= lane && Model.Lanes[lane - 1] != null)
                        {
                            @foreach (var card in Model.Lanes[lane - 1])
                            {
                                <div class="card-container">
                                    <!-- Also store full face + suit in data-card -->
                                    <p class="lane-card card"
                                       data-lane="@lane"
                                       data-card="@card.Face @card.Suit"
                                       onclick="cardClicked('@card.Face', '@card.Suit')">
                                        @card.Face @card.Suit
                                    </p>
                                    <div class="attached-cards">
                                        @foreach (var attachedCard in card.AttachedCards)
                                        {
                                            <p class="card">@attachedCard.Face @attachedCard.Suit</p>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>Empty</p>
                        }
                    </form>
                </div>
            }
        </div>
        <div style="display: flex; justify-content: space-around;">
            @for (int lane = 4; lane <= 6; lane++)
            {
                <div>
                    <form method="post">
                        <button type="submit" name="selectedLane" value="@lane"
                                style="background:none;border:none;padding:0;cursor:pointer;"
                                @(HttpContext.Session.GetString("CurrentPlayer") == "Player 2" ? "" : "disabled")>
                            <h4>Lane @lane (Score: @Model.CalculateLaneScore(@lane))</h4>
                        </button>
                        @if (Model.Lanes.Count >= lane && Model.Lanes[lane - 1] != null)
                        {
                            @foreach (var card in Model.Lanes[lane - 1])
                            {
                                <div class="card-container">
                                    <p class="lane-card card"
                                       data-lane="@lane"
                                       data-card="@card.Face @card.Suit"
                                       onclick="cardClicked('@card.Face', '@card.Suit')">
                                        @card.Face @card.Suit
                                    </p>
                                    <div class="attached-cards">
                                        @foreach (var attachedCard in card.AttachedCards)
                                        {
                                            <p class="card">@attachedCard.Face @attachedCard.Suit</p>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>Empty</p>
                        }
                    </form>
                </div>
            }
        </div>
    </div>
</div>

<script>
    let selectedCardFace = null;
    let selectedCardFull = null; // store the full "Face Suit"

    function highlightCards(face, fullCard) {
        selectedCardFace = face;
        selectedCardFull = fullCard; // e.g. "K Hearts"
        document.getElementById('selectedCardInput').value = fullCard;

        const laneCards = document.querySelectorAll('.lane-card');
        laneCards.forEach(card => {
            // If K, Q, or J, highlight lane cards so you can attach
            if (face === 'K' || face === 'Q' || face === 'J') {
                card.classList.add('highlight');
                card.addEventListener('click', placeCardNextTo);
            } else {
                card.classList.remove('highlight');
                card.removeEventListener('click', placeCardNextTo);
            }
        });

        // If it's not K/Q/J, just do a normal form submit
        if (face !== 'K' && face !== 'Q' && face !== 'J') {
            document.getElementById('card-selection-form').submit();
        }
    }

    function placeCardNextTo(event) {
        if (selectedCardFace !== 'K' && selectedCardFace !== 'Q' && selectedCardFace !== 'J') {
            return;
        }
        const cardElement = event.target;
        const cardFace = cardElement.getAttribute('data-card').split(' ')[0]; // e.g. "5"
        const lane = cardElement.getAttribute('data-lane');

        // Instead of sending only "K", we send the entire string "K Hearts".
        // This ensures the server sees "attachedCardParts[0] = 'K'", "attachedCardParts[1] = 'Hearts'"
        fetch('/?handler=PlaceCardNextTo', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                Card: `${cardFace} ${lane}`,
                AttachedCard: selectedCardFull  // e.g. "K Hearts"
            })
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                location.reload(); // reload page to see updated attached cards
            } else {
                alert(result.message);
            }
        })
        .catch(err => {
            console.error("Attach card error:", err);
        });

        resetHighlights();
    }

    function resetHighlights() {
        document.querySelectorAll('.lane-card').forEach(card => {
            card.classList.remove('highlight');
            card.removeEventListener('click', placeCardNextTo);
        });
        document.querySelectorAll('form button').forEach(button => {
            button.classList.remove('dim');
        });
        selectedCardFace = null;
        selectedCardFull = null;
    }

    function cardClicked(face, suit) {
        // If user clicks a lane card while holding a K/Q/J
        if (selectedCardFace === 'K' || selectedCardFace === 'Q' || selectedCardFace === 'J') {
            event.preventDefault();
            placeCardNextTo(event);
        }
    }
</script>
